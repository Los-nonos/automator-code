[
  {
    "name": "id",
    "variableCommand": "private readonly id: number;",
    "param": "id: number",
    "assignConstructor": "this.id = id;",
    "function": "getId(): number { return this.id; }",
    "schemaJoi": "id: Joi.number().min(0)",
    "propertyEntity": "@PrimaryGeneratedColumn()",
    "valueEntity": "public Id!: number;"
  },
  {
    "name": "name",
    "variableCommand": "private readonly name: string;",
    "param": "name: string",
    "assignConstructor": "this.name = name;",
    "function": "getName(): string { return this.name; }",
    "schemaJoi": "name: Joi.string().min(5).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Name: string;"
  },
  {
    "name": "surname",
    "variableCommand": "private readonly surname: string;",
    "param": "surname: string",
    "assignConstructor": "this.surname = surname;",
    "function": "getSurname(): string { return this.surname; }",
    "schemaJoi": "surname: Joi.string().min(5).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Surname: string;"
  },
  {
    "name": "email",
    "variableCommand": "private readonly email: string;",
    "param": "email: string",
    "assignConstructor": "this.email = email;",
    "function": "getEmail(): string { return this.email; }",
    "schemaJoi": "email: Joi.string().email().max(255)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Email: string;"
  },
  {
    "name": "address",
    "variableCommand": "private readonly address: string;",
    "param": "address: string",
    "assignConstructor": "this.address = address;",
    "function": "getAddress(): string { return this.address; }",
    "schemaJoi": "address: Joi.string().min(3).max(255)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Address: string;"
  },
  {
    "name": "dni",
    "variableCommand": "private readonly dni: number;",
    "param": "dni: number",
    "assignConstructor": "this.dni = dni;",
    "function": "getDni(): string { return this.dni; }",
    "schemaJoi": "dni: Joi.number().min(1000000).max(99999999)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Dni: number;"
  },
  {
    "name": "cuil",
    "variableCommand": "private readonly cuil: number;",
    "param": "cuil: number",
    "assignConstructor": "this.cuil = cuil;",
    "function": "getCuil(): string { return this.cuil; }",
    "schemaJoi": "cuil: Joi.number().min(100000000).max(9999999999)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Cuil: number;"
  },
  {
    "name": "cuit",
    "variableCommand": "private readonly cuit: number;",
    "param": "cuit: number",
    "assignConstructor": "this.cuit = cuit;",
    "function": "getCuit(): string { return this.cuit; }",
    "schemaJoi": "cuit: Joi.number().min(100000000).max(9999999999)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Cuit: number;"
  },
  {
    "name": "phone",
    "variableCommand": "private readonly phone: string;",
    "param": "phone: string",
    "assignConstructor": "this.phone = phone;",
    "function": "getPhone(): string { return this.phone; }",
    "schemaJoi": "phone: Joi.string().min(8).max(20)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Phone: string;"
  },
  {
    "name": "usename",
    "variableCommand": "private readonly username: string;",
    "param": "username: string",
    "assignConstructor": "this.username = username;",
    "function": "getUsername(): string { return this.username; }",
    "schemaJoi": "username: Joi.string().min(8).max(30)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Username: string;"
  },
  {
    "name": "password",
    "variableCommand": "private readonly password: string;",
    "param": "password: string",
    "assignConstructor": "this.password = password;",
    "function": "getPassword(): string { return this.password; }",
    "schemaJoi": "password: Joi.string().min(8).max(30)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Password: string;"
  },
  {
    "name": "token",
    "variableCommand": "private readonly token: string;",
    "param": "token: string",
    "assignConstructor": "this.token = token;",
    "function": "getToken(): string { return this.token; }",
    "schemaJoi": "token: Joi.string().min(8).max(500)",
    "propertyEntity": "",
    "valueEntity": ""
  },
  {
    "name": "title",
    "variableCommand": "private readonly title: string;",
    "param": "title: string",
    "assignConstructor": "this.title = title;",
    "function": "getTitle(): string { return this.title; }",
    "schemaJoi": "title: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Title: string;"
  },
  {
    "name": "grade",
    "variableCommand": "private readonly grade: string;",
    "param": "grade: string",
    "assignConstructor": "this.grade = grade;",
    "function": "getGrade(): string { return this.grade; }",
    "schemaJoi": "grade: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Grade: string;"
  },
  {
    "name": "institution",
    "variableCommand": "private readonly institution: string;",
    "param": "institution: string",
    "assignConstructor": "this.institution = institution;",
    "function": "getInstitution(): string { return this.institution; }",
    "schemaJoi": "institution: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Institution: string;"
  },
  {
    "name": "startDate",
    "variableCommand": "private readonly startDate: Date;",
    "param": "startDate: Date",
    "assignConstructor": "this.startDate = startDate;",
    "function": "getStartDate(): string { return this.startDate; }",
    "schemaJoi": "startDate: Joi.date().iso()",
    "propertyEntity": "@Column()",
    "valueEntity": "public StartDate: Date;"
  },
  {
    "name": "endDate",
    "variableCommand": "private readonly endDate: Date;",
    "param": "endDate: Date",
    "assignConstructor": "this.endDate = endDate;",
    "function": "getEndDate(): string { return this.endDate; }",
    "schemaJoi": "endDate: Joi.date().iso().allow(null)",
    "propertyEntity": "@Column()",
    "valueEntity": "public EndDate: Date;"
  },
  {
    "name": "city",
    "variableCommand": "private readonly city: string;",
    "param": "city: string",
    "assignConstructor": "this.city = city;",
    "function": "getCity(): string { return this.city; }",
    "schemaJoi": "city: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public City: string;"
  },
  {
    "name": "state",
    "variableCommand": "private readonly state: string;",
    "param": "state: string",
    "assignConstructor": "this.state = state;",
    "function": "getState(): string { return this.state; }",
    "schemaJoi": "state: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public State: string;"
  },
  {
    "name": "country",
    "variableCommand": "private readonly country: string;",
    "param": "country: string",
    "assignConstructor": "this.country = country;",
    "function": "getCountry(): string { return this.country; }",
    "schemaJoi": "country: Joi.string().length(2)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Country: string;"
  },
  {
    "name": "description",
    "variableCommand": "private readonly description: string;",
    "param": "description: string",
    "assignConstructor": "this.description = description;",
    "function": "getDescription(): string { return this.description; }",
    "schemaJoi": "description: Joi.string().min(15).max(255)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Description: string;"
  },
  {
    "name": "tinyDescription",
    "variableCommand": "private readonly tinyDescription: string;",
    "param": "tinyDescription: string",
    "assignConstructor": "this.tinyDescription = tinyDescription;",
    "function": "getTinyDescription(): string { return this.tinyDescription; }",
    "schemaJoi": "tinyDescription: Joi.string().min(15).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public TinyDescription: string;"
  },
  {
    "name": "client",
    "variableCommand": "private readonly client: string;",
    "param": "client: string",
    "assignConstructor": "this.client = client;",
    "function": "getClient(): string { return this.client; }",
    "schemaJoi": "client: Joi.string().min(3).max(100)",
    "propertyEntity": "@Column()",
    "valueEntity": "public Client: string;"
  },
  {
    "name": "registrationDate",
    "variableCommand": "private readonly registrationDate: Date;",
    "param": "registrationDate: Date",
    "assignConstructor": "this.registrationDate = registrationDate;",
    "function": "getRegistrationDate(): string { return this.registrationDate; }",
    "schemaJoi": "registrationDate: Joi.date().iso()",
    "propertyEntity": "@Column()",
    "valueEntity": "public RegistrationDate: Date;"
  },
  {
    "name": "isAvailable",
    "variableCommand": "private readonly isAvailable: boolean;",
    "param": "isAvailable: boolean",
    "assignConstructor": "this.isAvailable = isAvailable;",
    "function": "getIsAvailable(): boolean { return this.isAvailable; }",
    "schemaJoi": "isAvailable: Joi.boolean()",
    "propertyEntity": "@Column()",
    "valueEntity": "public IsAvailable: boolean;"
  }
]
